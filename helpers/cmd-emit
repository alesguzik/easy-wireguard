#!/bin/bash

MODE=

export WG_QUICK=yes
export WG_OPENWRT=no
export WG_DEFAULT_GW=no

for arg; do
  case $arg in
    --qr)
      shift
      MODE=qr
      ;;

    --shell)
      shift
      MODE=shell
      ;;

    --write)
      shift
      MODE=write
      ;;

    --up)
      shift
      MODE=up
      ;;

    --down)
      shift
      MODE=down
      ;;

    --wg-quick)
      shift
      export WG_QUICK=yes
      export WG_OPENWRT=no
      ;;

    --openwrt)
      shift
      export WG_QUICK=no
      export WG_OPENWRT=yes
      ;;

    --default)
      shift
      export WG_DEFAULT_GW=yes
      ;;

    --ssh)
      SSH_SERVER="$2"
      shift 2
      MODE=ssh
      ;;

    --*)
      echo "unknown $arg."
      exit 1
      ;;
    
    *)
      break
      ;;
  esac
done

server_name="$1"
server_config="servers/$server_name.conf"

client_name="$2"
client_config="clients/$client_name.conf"

qr_emit() {
  $@ | qrencode -t ansiutf8
}

shell_emit() {
  echo "cat <<EOF > /etc/wireguard/wg-${server_name}.conf"
  $@
  echo "EOF"
  echo ""

  if [[ "$WG_QUICK" == "yes" ]]; then
    echo ""
    echo "systemctl enable wg-quick@wg-${server_name}.service"
    echo "systemctl restart wg-quick@wg-${server_name}.service"
    echo ""
  fi

  if [[ "$WG_OPENWRT" == "yes" ]]; then
    cat <<"EOF"
cat <<WGEOF > /etc/hotplug.d/iface/99-wireguard
  #!/bin/sh

if [ "$ACTION" == "ifup" ] && [ -f "/etc/wireguard/$INTERFACE.conf" ]; then
  /usr/bin/wg addconf "$INTERFACE" /etc/wireguard/$INTERFACE.conf
fi
WGEOF
EOF
    echo "chmod +x /etc/hotplug.d/iface/99-wireguard"
    echo "ifup wg-${server_name}"
  fi
}

config_file() {
  if [[ -n "$client_name" ]]; then
    mkdir -p "$(pwd)/configs/${client_name}"
    if [[ -n "$WG_DEFAULT_GW" ]]; then
      echo "$(pwd)/configs/${client_name}/${server_name}def.conf"
    else
      echo "$(pwd)/configs/${client_name}/${server_name}.conf"
    fi
  else
    mkdir -p "$(pwd)/configs"
    echo "$(pwd)/configs/${server_name}.conf"
  fi
}

write_emit() {
  file="$(config_file)"
  umask 0077
  echo "write $file"
  $@ > "$file"
}

wg_quick_emit() {
  file="$(config_file)"
  ACTION="$1"
  shift

  write_emit "$@"
  echo "wg-quick $ACTION $file"
  wg-quick "$ACTION" "$file"
}

up_emit() {
  wg_quick_emit "up" "$@"
}

down_emit() {
  wg_quick_emit "down" "$@"
}

ssh_emit() {
  echo "ssh $SSH_SERVER"
  ( echo 'set -x'; shell_emit "$@" ) | ssh -T "$SSH_SERVER"
}

if [[ -n "$MODE" ]]; then
  ${MODE}_emit "$0" "$@"
  exit 0
fi

usage() {
  APP="$1"
  shift
  stderr "$APP" "[options]" "$@"
  stderr ""
  stderr "Options:"
  stderr " --qr: output QR code"
  stderr " --shell: output shell commands"
  stderr " --write: write configuration file (to configs/wg-*.conf)"
  stderr " --up: wg-quick up"
  stderr " --down: wg-quick down"
  stderr " --ssh USER@HOST: upload ssh config to remove machine"
  stderr " --wg-quick: output wg-quick compatible configuration"
  stderr " --openwrt: output openwrt compatible configuration"
  stderr ""
  exit 1
}

emit_config_interface() {
  local interface_config="$1"
  local interface_name=$(basename "$interface_config" .conf)
  local interface_privatekey=$(require_value "$interface_config" "PrivateKey")
  local interface_address=$(get_value "$interface_config" "Address")
  local interface_listenport=$(get_value "$interface_config" "ListenPort")
  local interface_default_gateway=$(get_value "$interface_config" "DefaultGateway")
  local interface_fwmark=$(get_value "$interface_config" "FwMark")

  local peer_config="$2"
  local peer_dns=$(get_value "$peer_config" "DNS")

  if [[ -z "$interface_address" ]]; then
    interface_address="$(alloc_address "$interface_name" "$start_ip" "$end_ip")/32"
  fi

  echo "[Interface]"
  echo "PrivateKey=$interface_privatekey"
  if [[ -n "$interface_fwmark" ]]; then
    echo "FwMark=$interface_fwmark"
  fi
  if [[ "$WG_QUICK" == "yes" ]]; then
    if [[ -n "$interface_address" ]]; then
      echo "Address=$interface_address"
    fi
    if [[ -n "$interface_listenport" ]]; then
      echo "ListenPort=$interface_listenport"
    fi
    if [[ -n "$interface_default_gateway" ]]; then
      echo "PostUp = sysctl net.ipv4.ip_forward=1; iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $interface_default_gateway -j MASQUERADE"
      echo "PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $interface_default_gateway -j MASQUERADE"
    fi
    if [[ -n "$peer_dns" ]]; then
      echo "DNS=$peer_dns"
    fi
  fi

  echo
}

emit_config_peer() {
  local peer_config="$1"
  local interface_config="$2"

  local peer_name=$(basename "$peer_config" .conf)
  local peer_publickey=$(require_value "$peer_config" "PublicKey")
  local peer_address=$(get_value "$peer_config" "Address")
  local peer_routes=$(get_value "$peer_config" "Routes")
  local interface_keepalive=$(get_value "$interface_config" "PersistentKeepalive")
  local peer_endpoint=$(get_value "$peer_config" "Endpoint")
  local peer_listenport=$(get_value "$peer_config" "ListenPort")
  local peer_psk=$(get_value "$peer_psk" "PresharedKey")

  if [[ -z "$peer_address" ]]; then
    peer_address=$(alloc_address "$peer_name" "$start_ip" "$end_ip")
  fi

  echo "[Peer]"
  echo "PublicKey=$peer_publickey"
  if [[ -n "$peer_psk" ]]; then
    echo "PresharedKey=$peer_psk"
  fi
  if [[ -n "$peer_endpoint" ]]; then
    echo "Endpoint=$peer_endpoint:${peer_listenport-DEFAULT_LISTEN_PORT}"
  fi
  if [[ -n "$interface_keepalive" ]]; then
    echo "PersistentKeepalive=$interface_keepalive"
  fi
  if [[ -n "$peer_address" ]]; then
    echo "AllowedIPs=$peer_address"
  fi
  for route in $peer_routes; do
    echo "AllowedIPs=$route"
  done
  if [[ -n "$WG_DEFAULT_GW" ]]; then
    echo "AllowedIPs=0.0.0.0/0"
  fi

  echo
}
