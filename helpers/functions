#!/bin/bash

if [[ -e .env ]]; then
  source .env
fi

DEFAULT_LISTEN_PORT=51820

shopt -s nullglob

get_value() {
  local config="$1"
  shift

  if [[ ! -e "$config" ]]; then
    return
  fi

  (
    source "$config"

    for i; do
      if declare -p "$i" &>/dev/null; then
        echo "${!i}"
        return
      fi
    done
  )
}

require_value() {
  local config="$1"
  shift

  if [[ ! -e "$config" ]]; then
    stderr "$config is missing"
    return 1
  fi

  (
    source "$config"

    for i; do
      if declare -p "$i" &>/dev/null; then
        echo "${!i}"
        return
      fi
    done

    stderr "$config the $i is missing"
    return 1
  )
}

stderr() {
  echo "$@" 1>&2
}

atoi() {
  #Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
  local IP=$1; local IPNUM=0
  for (( i=0 ; i<4 ; ++i )); do
  ((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
  IP=${IP#*.}
  done
  echo $IPNUM
} 

itoa() {
  #returns the dotted-decimal ascii form of an IP arg passed in integer format
  echo -n $(($(($(($((${1}/256))/256))/256))%256)).
  echo -n $(($(($((${1}/256))/256))%256)).
  echo -n $(($((${1}/256))%256)).
  echo $((${1}%256))
}

alloc_address() {
  local node_ip="$1"
  local node_publickey="$2"
  local startip=$(atoi "$3")
  local endip=$(atoi "$4")

  for (( i=$startip; i<=$endip; i=i+1 )); do
    local ip=$(itoa $i)
    local ipfile="addresses/$ip.node"
    local ipfile_ip=""
    local ipfile_publickey=""
    local ipfile_rest=""

    if [[ -e "$ipfile" ]]; then
      read "-d\n" ipfile_ip ipfile_publickey ipfile_rest < "$ipfile"
    fi

    if [[ "$ipfile_ip" == "$node_ip" ]] && [[ "$ipfile_publickey" == "$node_publickey" ]]; then
      # return existing IP
      echo "$ip"
      return 0
    fi

    if [[ -z "$ipfile_ip" ]] || [[ "$ipfile_ip" == "$node_ip" ]] || [[ "$ipfile_publickey" == "$node_publickey" ]]; then
      # allocate or rewrite IP-file
      echo "$node_ip" > $ipfile
      echo "$node_publickey" >> $ipfile
      echo "$ip"
      return 0
    fi
  done

  echo "No free addresses" 1>&2
  return 1
}

load_config() {
  start_ip=$(get_value "$1" "StartIp")
  end_ip=$(get_value "$1" "EndIp")
}
